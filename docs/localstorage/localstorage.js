// Generated by Haxe 4.0.5
(function ($global) { "use strict";
class DateTools {
	static __format_get(d,e) {
		switch(e) {
		case "%":
			return "%";
		case "A":
			return DateTools.DAY_NAMES[d.getDay()];
		case "B":
			return DateTools.MONTH_NAMES[d.getMonth()];
		case "C":
			return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
		case "D":
			return DateTools.__format(d,"%m/%d/%y");
		case "F":
			return DateTools.__format(d,"%Y-%m-%d");
		case "I":case "l":
			var hour = d.getHours() % 12;
			return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
		case "M":
			return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
		case "R":
			return DateTools.__format(d,"%H:%M");
		case "S":
			return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
		case "T":
			return DateTools.__format(d,"%H:%M:%S");
		case "Y":
			return Std.string(d.getFullYear());
		case "a":
			return DateTools.DAY_SHORT_NAMES[d.getDay()];
		case "b":case "h":
			return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
		case "d":
			return StringTools.lpad(Std.string(d.getDate()),"0",2);
		case "e":
			return Std.string(d.getDate());
		case "H":case "k":
			return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
		case "m":
			return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
		case "n":
			return "\n";
		case "p":
			if(d.getHours() > 11) {
				return "PM";
			} else {
				return "AM";
			}
			break;
		case "r":
			return DateTools.__format(d,"%I:%M:%S %p");
		case "s":
			return Std.string(d.getTime() / 1000 | 0);
		case "t":
			return "\t";
		case "u":
			var t = d.getDay();
			if(t == 0) {
				return "7";
			} else if(t == null) {
				return "null";
			} else {
				return "" + t;
			}
			break;
		case "w":
			return Std.string(d.getDay());
		case "y":
			return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
		default:
			throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
		}
	}
	static __format(d,f) {
		var r_b = "";
		var p = 0;
		while(true) {
			var np = f.indexOf("%",p);
			if(np < 0) {
				break;
			}
			var len = np - p;
			r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
			r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
			p = np + 2;
		}
		var len1 = f.length - p;
		r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
		return r_b;
	}
	static format(d,f) {
		return DateTools.__format(d,f);
	}
}
DateTools.__name__ = true;
class HxOverrides {
	static dateStr(date) {
		var m = date.getMonth() + 1;
		var d = date.getDate();
		var h = date.getHours();
		var mi = date.getMinutes();
		var s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static strDate(s) {
		switch(s.length) {
		case 8:
			var k = s.split(":");
			var d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			var k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			var k2 = s.split(" ");
			var y = k2[0].split("-");
			var t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw new js__$Boot_HaxeError("Invalid date format : " + s);
		}
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
}
HxOverrides.__name__ = true;
class LocalStorage {
	constructor() {
		this.superHeroLast = ["x","shield","machine","justice","beast","wing","arrow","skull","blade","bolt","cobra","blaze","soldier","strike","falcon","fang","king","surfer","bot","guard","thing","claw","brain","master","power","storm"];
		this.superHeroFirst = ["captain","turbo","galactic","the","aqua","fire","iron","super","green","phantom","dark","ghost","professor","atomic","rock","omega","rocket","shadow","agent","silver","wild","wolf","ultra","wonder","doctor","star"];
		this.dbName = "test-localstorage";
		utils_LocalData.create(this.dbName);
		if(utils_LocalData.read(this.dbName,"itemArray") == null) {
			utils_LocalData.update(this.dbName,"itemArray",[]);
		}
		var _gthis = this;
		window.document.addEventListener("DOMContentLoaded",function(event) {
			window.console.log("LocalStorage -Dom ready");
			_gthis.init();
		});
	}
	init() {
		this.setElements();
		this.updateOutput();
	}
	setElements() {
		this.output = window.document.getElementById("output");
		this.btnDownload = window.document.getElementById("btn-add-item");
		this.btnDownload.onclick = $bind(this,this.onAddHandler);
		this.btnBase64 = window.document.getElementById("btn-clear");
		this.btnBase64.onclick = $bind(this,this.onClearHandler);
		this.btnRead = window.document.getElementById("btn-read");
		this.btnRead.onclick = $bind(this,this.onReadHandler);
	}
	updateOutput() {
		var arr = utils_LocalData.read(this.dbName,"itemArray");
		var out = "<ul>";
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var obj = arr[i];
			var date = HxOverrides.strDate(obj.created);
			var t = DateTools.format(date,"%T");
			out += "<li>time: " + t + " - <b>" + obj.name + "</b></li>";
		}
		out += "</ul>";
		this.output.innerHTML = out;
	}
	onAddHandler(e) {
		var arr = utils_LocalData.read(this.dbName,"itemArray");
		console.log("src/LocalStorage.hx:86:",arr);
		var superHeroName = this.superHeroFirst[Math.floor(Math.random() * this.superHeroFirst.length)] + " " + this.superHeroLast[Math.floor(Math.random() * this.superHeroLast.length)];
		var obj = { name : superHeroName, created : HxOverrides.dateStr(new Date())};
		arr.push(obj);
		console.log("src/LocalStorage.hx:97:",arr);
		utils_LocalData.update(this.dbName,"itemArray",arr);
		this.updateOutput();
	}
	onClearHandler(e) {
		utils_LocalData.clear(this.dbName);
	}
	onReadHandler(e) {
		var json = utils_LocalData.load(this.dbName);
		console.log("src/LocalStorage.hx:108:",json);
	}
	static main() {
		var app = new LocalStorage();
	}
}
LocalStorage.__name__ = true;
Object.assign(LocalStorage.prototype, {
	__class__: LocalStorage
});
Math.__name__ = true;
class Reflect {
	static getProperty(o,field) {
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class StringTools {
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		var buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
}
StringTools.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
});
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
class utils_LocalData {
	static create(name,isOverwrite) {
		if(isOverwrite == null) {
			isOverwrite = false;
		}
		if(utils_LocalData.isDebug) {
			window.console.info("get local storage");
		}
		utils_LocalData.json = JSON.parse(window.localStorage.getItem(name));
		if(utils_LocalData.json == null || isOverwrite) {
			utils_LocalData.json = { _id : "localdata-" + new Date().getTime(), version : "0.0.1", created : HxOverrides.dateStr(new Date()), updated : HxOverrides.dateStr(new Date())};
			if(utils_LocalData.isDebug) {
				window.console.log("initialize database:" + JSON.stringify(utils_LocalData.json));
			}
		}
		utils_LocalData.saveData(name);
	}
	static read(name,key) {
		if(utils_LocalData.json == null) {
			utils_LocalData.json = JSON.parse(window.localStorage.getItem(name));
		}
		if(key == null) {
			return utils_LocalData.json;
		}
		if(Object.prototype.hasOwnProperty.call(utils_LocalData.json,key)) {
			return Reflect.getProperty(utils_LocalData.json,key);
		} else {
			return null;
		}
	}
	static load(name) {
		if(utils_LocalData.json == null) {
			utils_LocalData.json = JSON.parse(window.localStorage.getItem(name));
		}
		if(utils_LocalData.json == null) {
			return null;
		} else {
			return utils_LocalData.json;
		}
	}
	static update(name,key,value) {
		if(utils_LocalData.json == null) {
			utils_LocalData.json = JSON.parse(window.localStorage.getItem(name));
		}
		Reflect.setProperty(utils_LocalData.json,key,value);
		Reflect.setProperty(utils_LocalData.json,"updated",HxOverrides.dateStr(new Date()));
		utils_LocalData.saveData(name);
	}
	static clear(name) {
		utils_LocalData.json = null;
		window.localStorage.removeItem(name);
		if(utils_LocalData.isDebug) {
			window.console.log("cleared data \"" + name + "\"");
		}
	}
	static saveData(name) {
		window.localStorage.setItem(name,JSON.stringify(utils_LocalData.json));
		if(utils_LocalData.isDebug) {
			window.console.log(utils_LocalData.json);
		}
	}
}
utils_LocalData.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
utils_LocalData.isDebug = true;
LocalStorage.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
